{"version":3,"file":"static/js/748.1e573f88.chunk.js","mappings":"2LAGaA,EAAOC,EAAAA,GAAAA,GAAH,yOAaJC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,KAAPF,CAAH,yJAWVG,EAASH,EAAAA,GAAAA,IAAH,2CAINI,EAAUJ,EAAAA,GAAAA,IAAH,uHAOPK,EAAOL,EAAAA,GAAAA,EAAH,sGAOJM,EAAON,EAAAA,GAAAA,KAAH,iJ,SClCTO,EAAgBC,EAAQ,IAAxBD,YAEKE,EAAY,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACvCC,EAAWP,IAEjB,OACE,SAACR,EAAD,WACE,UAACE,EAAD,CAAYc,GAAI,WAAaL,EAAIM,MAAO,CAAEC,KAAMH,GAAhD,WACE,SAACX,EAAD,CAAQe,KAAKC,EAAAA,EAAAA,GAAS,IAAKP,GAASQ,IAAKT,EAAOU,MAAM,SACtD,UAACjB,EAAD,YACE,SAACC,EAAD,UAAOM,KACP,SAACL,EAAD,UAAgB,IAATO,EAAA,OAAaA,QAAb,IAAaA,OAAb,EAAaA,EAAMS,QAAQ,GAAK,eAKhD,C,2LCzBYC,EAAYvB,EAAAA,GAAAA,IAAH,oIAQTwB,EAAaxB,EAAAA,GAAAA,KAAH,+HAQVyB,EAAczB,EAAAA,GAAAA,MAAH,+OAaX0B,EAAe1B,EAAAA,GAAAA,OAAH,wMAYZ2B,EAAa3B,EAAAA,GAAAA,GAAH,mJ,SCkCvB,EAhEmB,WAAO,IAAD,EACvB,GAAwC4B,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,UAAGP,EAAaQ,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAIA,IAAMG,EAAS,mCAAG,2FAChBJ,GAAa,GADG,mBAGQK,EAAAA,EAAAA,IAAYJ,GAHpB,OAGRK,EAHQ,OAIdR,GAAU,OAAIQ,IAJA,gDAMdC,QAAQC,MAAR,MANc,yBAQdR,GAAa,GARC,4EAAH,qDAYfI,GAdC,CAeF,GAAE,CAACH,IASJ,OACE,UAACb,EAAD,YACE,UAACC,EAAD,CAAYoB,SATK,SAAAC,GACnBA,EAAIC,iBACJ,IAAQC,EAAUF,EAAIG,OAAOC,SAASC,OAA9BH,MACRd,EAAU,IACVH,EAAgB,CAAEqB,MAAOJ,GAC1B,EAIG,WACE,SAACtB,EAAD,CACE2B,KAAK,OACLC,KAAK,SACLC,YAAY,uBAEd,SAAC5B,EAAD,CAAc0B,KAAK,SAAnB,uBAGDlB,GACC,SAACqB,EAAA,EAAD,KAEA,SAAC5B,EAAD,iBACGK,QADH,IACGA,OADH,EACGA,EAAQwB,KAAI,gBAAG9C,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAO8C,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OACX,SAACjD,EAAA,EAAD,CAEEC,GAAIA,EACJC,MAAOA,EACPC,OAAQ6C,EACR5C,KAAM6C,GAJDhD,EAFI,QAatB,C","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","pages/MoviesPage/MoviesPage.styled.js","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Item = styled.li`\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\n\n  transform: scale(1);\n  transition: transform 300ms ease;\n\n  :hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: #020930;\n\n  :hover,\n  :focus {\n    color: #f74f07;\n    text-decoration: underline;\n  }\n`;\n\nexport const Poster = styled.img`\n  display: block;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  max-width: 235px;\n  text-align: start;\n  font-weight: 500;\n`;\n\nexport const Vote = styled.span`\n  display: block;\n  color: #fff;\n  width: 30px;\n  height: 20px;\n  border-radius: 4px;\n  background-color: #f74f07;\n`;\n","import PropTypes from 'prop-types';\nimport { imageSrc } from 'services/image.service';\nimport {\n  Poster,\n  StyledLink,\n  Text,\n  Vote,\n  Wrapper,\n  Item,\n} from './MovieItem.styled';\n\nconst { useLocation } = require('react-router-dom');\n\nexport const MovieItem = ({ id, title, poster, vote }) => {\n  const location = useLocation();\n\n  return (\n    <Item>\n      <StyledLink to={'/movies/' + id} state={{ from: location }}>\n        <Poster src={imageSrc(300, poster)} alt={title} width=\"300\" />\n        <Wrapper>\n          <Text>{title}</Text>\n          <Vote>{vote !== 0 ? vote?.toFixed(1) : 'n/a'}</Vote>\n        </Wrapper>\n      </StyledLink>\n    </Item>\n  );\n};\n\nMovieItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  text-align: center;\n  padding: 24px;\n  max-width: 1248px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const StyledForm = styled.form`\n  position: relative;\n  display: flex;\n  width: 400px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const StyledInput = styled.input`\n  padding: 8px;\n  width: 100%;\n  border: 1px solid #020930;\n  background-color: transparent;\n  border-radius: 4px;\n\n  :focus-within {\n    border: 1px solid #f74f07;\n    outline: 1px solid transparent;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  position: absolute;\n  top: 2px;\n  right: 2px;\n  bottom: 2px;\n  cursor: pointer;\n  border: none;\n  color: #f74f07;\n  background-color: #020930;\n  border-radius: 4px;\n`;\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  margin-top: 16px;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport { MovieItem } from 'components/MovieItem/MovieItem';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovie } from 'services/movies.service';\nimport {\n  Container,\n  StyledButton,\n  StyledForm,\n  StyledInput,\n  StyledList,\n} from './MoviesPage.styled';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const results = await searchMovie(searchQuery);\n        setMovies([...results]);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [searchQuery]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const { value } = evt.target.elements.search;\n    setMovies([]);\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <Container>\n      <StyledForm onSubmit={handleSubmit}>\n        <StyledInput\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Enter key word...\"\n        />\n        <StyledButton type=\"submit\">Search</StyledButton>\n      </StyledForm>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <StyledList>\n          {movies?.map(({ id, title, poster_path, vote_average }) => (\n            <MovieItem\n              key={id}\n              id={id}\n              title={title}\n              poster={poster_path}\n              vote={vote_average}\n            />\n          ))}\n        </StyledList>\n      )}\n    </Container>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["Item","styled","StyledLink","Link","Poster","Wrapper","Text","Vote","useLocation","require","MovieItem","id","title","poster","vote","location","to","state","from","src","imageSrc","alt","width","toFixed","Container","StyledForm","StyledInput","StyledButton","StyledList","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","isLoading","setIsLoading","searchQuery","get","useEffect","fetchData","searchMovie","results","console","error","onSubmit","evt","preventDefault","value","target","elements","search","query","type","name","placeholder","Loader","map","poster_path","vote_average"],"sourceRoot":""}